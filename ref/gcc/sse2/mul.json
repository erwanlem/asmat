{
    "function": "mul",
    "asm": [
        {
            "type": [
                "float",
                "float"
            ],
            "instr": [
                "mulps %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "double",
                "double"
            ],
            "instr": [
                "mulpd %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::int64_t",
                "std::int64_t"
            ],
            "instr": [
                "movq %xmm0,%rax",
                "movhlps %xmm0,%xmm2",
                "movhlps %xmm1,%xmm3",
                "movq %xmm1,%rdx",
                "movq %xmm3,%rcx",
                "imulq %rax,%rdx",
                "movq %xmm2,%rax",
                "imulq %rcx,%rax",
                "movq %rdx,%xmm0",
                "movq %rax,%xmm1",
                "movlhps %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::int32_t",
                "std::int32_t"
            ],
            "instr": [
                "movdqa %xmm1,%xmm2",
                "movdqa %xmm0,%xmm1",
                "psrldq $4,%xmm1",
                "pmuludq %xmm2,%xmm0",
                "movdqa %xmm2,%xmm3",
                "movdqa .LC31(%rip),%xmm2",
                "psrldq $4,%xmm3",
                "pmuludq %xmm3,%xmm1",
                "pand %xmm2,%xmm0",
                "pand %xmm2,%xmm1",
                "pslldq $4,%xmm1",
                "por %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::int16_t",
                "std::int16_t"
            ],
            "instr": [
                "pmullw %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::int8_t",
                "std::int8_t"
            ],
            "instr": [
                "movdqa %xmm0,%xmm2",
                "pmullw %xmm1,%xmm0",
                "movdqa %xmm1,%xmm3",
                "psrlw $8,%xmm3",
                "psrlw $8,%xmm2",
                "pmullw %xmm3,%xmm2",
                "movdqa .LC32(%rip),%xmm3",
                "pand %xmm3,%xmm0",
                "pand %xmm3,%xmm2",
                "psllw $8,%xmm2",
                "por %xmm2,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint64_t",
                "std::uint64_t"
            ],
            "instr": [
                "movq %xmm0,%rax",
                "movhlps %xmm0,%xmm2",
                "movhlps %xmm1,%xmm3",
                "movq %xmm1,%rdx",
                "movq %xmm3,%rcx",
                "imulq %rax,%rdx",
                "movq %xmm2,%rax",
                "imulq %rcx,%rax",
                "movq %rdx,%xmm0",
                "movq %rax,%xmm1",
                "movlhps %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint32_t",
                "std::uint32_t"
            ],
            "instr": [
                "movdqa %xmm1,%xmm2",
                "movdqa %xmm0,%xmm1",
                "psrldq $4,%xmm1",
                "pmuludq %xmm2,%xmm0",
                "movdqa %xmm2,%xmm3",
                "movdqa .LC31(%rip),%xmm2",
                "psrldq $4,%xmm3",
                "pmuludq %xmm3,%xmm1",
                "pand %xmm2,%xmm0",
                "pand %xmm2,%xmm1",
                "pslldq $4,%xmm1",
                "por %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint16_t",
                "std::uint16_t"
            ],
            "instr": [
                "pmullw %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint8_t",
                "std::uint8_t"
            ],
            "instr": [
                "movdqa %xmm0,%xmm2",
                "pmullw %xmm1,%xmm0",
                "movdqa %xmm1,%xmm3",
                "psrlw $8,%xmm3",
                "psrlw $8,%xmm2",
                "pmullw %xmm3,%xmm2",
                "movdqa .LC32(%rip),%xmm3",
                "pand %xmm3,%xmm0",
                "pand %xmm3,%xmm2",
                "psllw $8,%xmm2",
                "por %xmm2,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint64_t",
                "std::uint64_t"
            ],
            "instr": [
                "movq %xmm0,%rax",
                "movhlps %xmm0,%xmm2",
                "movhlps %xmm1,%xmm3",
                "movq %xmm1,%rdx",
                "movq %xmm3,%rcx",
                "imulq %rax,%rdx",
                "movq %xmm2,%rax",
                "imulq %rcx,%rax",
                "movq %rdx,%xmm0",
                "movq %rax,%xmm1",
                "movlhps %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint32_t",
                "std::uint32_t"
            ],
            "instr": [
                "movdqa %xmm1,%xmm2",
                "movdqa %xmm0,%xmm1",
                "psrldq $4,%xmm1",
                "pmuludq %xmm2,%xmm0",
                "movdqa %xmm2,%xmm3",
                "movdqa .LC31(%rip),%xmm2",
                "psrldq $4,%xmm3",
                "pmuludq %xmm3,%xmm1",
                "pand %xmm2,%xmm0",
                "pand %xmm2,%xmm1",
                "pslldq $4,%xmm1",
                "por %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint16_t",
                "std::uint16_t"
            ],
            "instr": [
                "pmullw %xmm1,%xmm0"
            ]
        },
        {
            "type": [
                "std::uint8_t",
                "std::uint8_t"
            ],
            "instr": [
                "movdqa %xmm0,%xmm2",
                "pmullw %xmm1,%xmm0",
                "movdqa %xmm1,%xmm3",
                "psrlw $8,%xmm3",
                "psrlw $8,%xmm2",
                "pmullw %xmm3,%xmm2",
                "movdqa .LC32(%rip),%xmm3",
                "pand %xmm3,%xmm0",
                "pand %xmm3,%xmm2",
                "psllw $8,%xmm2",
                "por %xmm2,%xmm0"
            ]
        }
    ]
}