{
    "function": "absmax",
    "asm": [
        {
            "type": [
                "float",
                "float"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovaps %ymm0,-0xb0(%rbp)",
                "vmovaps %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovaps -0xb0(%rbp),%ymm0",
                "vmovaps %ymm0,-0x70(%rbp)",
                "vmovaps -0xd0(%rbp),%ymm0",
                "vmovaps %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 76",
                "jmp 81",
                "call 81",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 98",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je ac",
                "call ac",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "double",
                "double"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovapd %ymm0,-0xb0(%rbp)",
                "vmovapd %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovapd -0xb0(%rbp),%ymm0",
                "vmovapd %ymm0,-0x70(%rbp)",
                "vmovapd -0xd0(%rbp),%ymm0",
                "vmovapd %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 132",
                "jmp 13d",
                "call 13d",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 154",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 168",
                "call 168",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::int64_t",
                "std::int64_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 1ee",
                "jmp 1f9",
                "call 1f9",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 210",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 224",
                "call 224",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::int32_t",
                "std::int32_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 2aa",
                "jmp 2b5",
                "call 2b5",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 2cc",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 2e0",
                "call 2e0",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::int16_t",
                "std::int16_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 366",
                "jmp 371",
                "call 371",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 388",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 39c",
                "call 39c",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::int8_t",
                "std::int8_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 422",
                "jmp 42d",
                "call 42d",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 444",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 458",
                "call 458",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint64_t",
                "std::uint64_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 7ce",
                "jmp 7d9",
                "call 7d9",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 7f0",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 804",
                "call 804",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint32_t",
                "std::uint32_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 88a",
                "jmp 895",
                "call 895",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 8ac",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 8c0",
                "call 8c0",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint16_t",
                "std::uint16_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 946",
                "jmp 951",
                "call 951",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 968",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 97c",
                "call 97c",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint8_t",
                "std::uint8_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call a02",
                "jmp a0d",
                "call a0d",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call a24",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je a38",
                "call a38",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint64_t",
                "std::uint64_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 7ce",
                "jmp 7d9",
                "call 7d9",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 7f0",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 804",
                "call 804",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint32_t",
                "std::uint32_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 88a",
                "jmp 895",
                "call 895",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 8ac",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 8c0",
                "call 8c0",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint16_t",
                "std::uint16_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call 946",
                "jmp 951",
                "call 951",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call 968",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je 97c",
                "call 97c",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        },
        {
            "type": [
                "std::uint8_t",
                "std::uint8_t"
            ],
            "instr": [
                "lea 0x8(%rsp),%r10",
                "and $0xffffffffffffffe0,%rsp",
                "push -0x8(%r10)",
                "push %rbp",
                "mov %rsp,%rbp",
                "push %r10",
                "push %rbx",
                "sub $0xc0,%rsp",
                "vmovdqa %ymm0,-0xb0(%rbp)",
                "vmovdqa %ymm1,-0xd0(%rbp)",
                "mov %fs:0x28,%rax",
                "mov %rax,-0x18(%rbp)",
                "xor %eax,%eax",
                "vmovdqa -0xb0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x70(%rbp)",
                "vmovdqa -0xd0(%rbp),%ymm0",
                "vmovdqa %ymm0,-0x50(%rbp)",
                "lea 0x0(%rip),%rbx",
                "lea 0x0(%rip),%rax",
                "mov %rax,-0x78(%rbp)",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rdi",
                "call a02",
                "jmp a0d",
                "call a0d",
                "lea -0x50(%rbp),%rcx",
                "lea -0x70(%rbp),%rdx",
                "lea -0x7c(%rbp),%rax",
                "mov %rax,%rsi",
                "mov %rbx,%rdi",
                "call a24",
                "mov -0x18(%rbp),%rax",
                "sub %fs:0x28,%rax",
                "je a38",
                "call a38",
                "add $0xc0,%rsp",
                "pop %rbx",
                "pop %r10",
                "pop %rbp",
                "lea -0x8(%r10),%rsp"
            ]
        }
    ]
}